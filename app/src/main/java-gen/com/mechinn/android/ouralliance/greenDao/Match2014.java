package com.mechinn.android.ouralliance.greenDao;

import android.util.Log;

import java.util.List;
import com.mechinn.android.ouralliance.greenDao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mechinn.android.ouralliance.greenDao.dao.Event2014Dao;
import com.mechinn.android.ouralliance.greenDao.dao.Match2014Dao;
import com.mechinn.android.ouralliance.greenDao.dao.MatchScouting2014Dao;
import com.mechinn.android.ouralliance.greenDao.dao.MultimediaDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MATCH2014.
 */
public class Match2014 extends com.mechinn.android.ouralliance.OurAllianceObject  implements Comparable<Match2014> {

    private Long id;
    /** Not-null value. */
    private java.util.Date modified;
    /** Not-null value. */
    private String compLevel;
    private Integer setNumber;
    private java.util.Date time;
    private Integer redScore;
    private Integer blueScore;
    private Integer matchNum;
    private Long eventId;
    private Long multimediaId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient Match2014Dao myDao;

    private Event2014 event2014;
    private Long event2014__resolvedKey;

    private List<MatchScouting2014> teams;
    private List<Multimedia> multimedia;

    // KEEP FIELDS - put your custom fields here
    public static final String TAG = "Match2014";
    // KEEP FIELDS END

    public Match2014() {
    }

    public Match2014(Long id) {
        this.id = id;
    }

    public Match2014(Long id, java.util.Date modified, String compLevel, Integer setNumber, java.util.Date time, Integer redScore, Integer blueScore, Integer matchNum, Long eventId, Long multimediaId) {
        this.id = id;
        this.modified = modified;
        this.compLevel = compLevel;
        this.setNumber = setNumber;
        this.time = time;
        this.redScore = redScore;
        this.blueScore = blueScore;
        this.matchNum = matchNum;
        this.eventId = eventId;
        this.multimediaId = multimediaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMatch2014Dao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getModified() {
        return modified;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModified(java.util.Date modified) {
        this.modified = modified;
    }

    /** Not-null value. */
    public String getCompLevel() {
        return compLevel;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCompLevel(String compLevel) {
        this.compLevel = compLevel;
    }

    public Integer getSetNumber() {
        return setNumber;
    }

    public void setSetNumber(Integer setNumber) {
        this.setNumber = setNumber;
    }

    public java.util.Date getTime() {
        return time;
    }

    public void setTime(java.util.Date time) {
        this.time = time;
    }

    public Integer getRedScore() {
        return redScore;
    }

    public void setRedScore(Integer redScore) {
        this.redScore = redScore;
    }

    public Integer getBlueScore() {
        return blueScore;
    }

    public void setBlueScore(Integer blueScore) {
        this.blueScore = blueScore;
    }

    public Integer getMatchNum() {
        return matchNum;
    }

    public void setMatchNum(Integer matchNum) {
        this.matchNum = matchNum;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public Long getMultimediaId() {
        return multimediaId;
    }

    public void setMultimediaId(Long multimediaId) {
        this.multimediaId = multimediaId;
    }

    /** To-one relationship, resolved on first access. */
    public Event2014 getEvent2014() {
        Long __key = this.eventId;
        if (event2014__resolvedKey == null || !event2014__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Event2014Dao targetDao = daoSession.getEvent2014Dao();
            Event2014 event2014New = targetDao.load(__key);
            synchronized (this) {
                event2014 = event2014New;
            	event2014__resolvedKey = __key;
            }
        }
        return event2014;
    }

    public void setEvent2014(Event2014 event2014) {
        synchronized (this) {
            this.event2014 = event2014;
            eventId = event2014 == null ? null : event2014.getId();
            event2014__resolvedKey = eventId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MatchScouting2014> getTeams() {
        if (teams == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchScouting2014Dao targetDao = daoSession.getMatchScouting2014Dao();
            List<MatchScouting2014> teamsNew = targetDao._queryMatch2014_Teams(id);
            synchronized (this) {
                if(teams == null) {
                    teams = teamsNew;
                }
            }
        }
        return teams;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeams() {
        teams = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Multimedia> getMultimedia() {
        if (multimedia == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MultimediaDao targetDao = daoSession.getMultimediaDao();
            List<Multimedia> multimediaNew = targetDao._queryMatch2014_Multimedia(id);
            synchronized (this) {
                if(multimedia == null) {
                    multimedia = multimediaNew;
                }
            }
        }
        return multimedia;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMultimedia() {
        multimedia = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String toString() {
        Log.d(TAG, "type: " + getMatchType());
        switch(getMatchType()) {
            case PRACTICE:
                return "Practice: "+this.getDisplayNum();
            case QUARTERFINAL:
                return "Quarterfinal: "+getMatchSet()+" Match: "+(((getMatchNum()-1000)/10));
            case SEMIFINAL:
                return "Semifinal: "+ getMatchSet()+" Match: "+(((getMatchNum()-10000)/10));
            case FINAL:
                return "Final: "+(((getMatchNum()-100000)/10));
            default:
                return "Qualifier: "+this.getDisplayNum();
        }
    }
    public boolean equals(Object data) {
        if(!(data instanceof Match2014)) {
            return false;
        }
        return  getEvent2014().equals(((Match2014)data).getCompetition()) &&
                getMatchNum()==((Match2014)data).getMatchNum() &&
                getRedScore()==((Match2014)data).getRedScore() &&
                getBlueScore()==((Match2014)data).getBlueScore() &&
                getMatchType().equals(((Match2014)data).getMatchType()) &&
                getMatchSet()==((Match2014)data).getMatchSet();
    }
    public int compareTo(Match2014 another) {
        return this.getDisplayNum() - another.getDisplayNum();
    }
    // KEEP METHODS END

}
