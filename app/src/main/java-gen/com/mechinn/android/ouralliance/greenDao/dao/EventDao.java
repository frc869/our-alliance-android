package com.mechinn.android.ouralliance.greenDao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mechinn.android.ouralliance.greenDao.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modified = new Property(1, java.util.Date.class, "modified", false, "MODIFIED");
        public final static Property ShortName = new Property(2, String.class, "shortName", false, "SHORT_NAME");
        public final static Property EventCode = new Property(3, String.class, "eventCode", false, "EVENT_CODE");
        public final static Property EventType = new Property(4, int.class, "eventType", false, "EVENT_TYPE");
        public final static Property EventDistrict = new Property(5, int.class, "eventDistrict", false, "EVENT_DISTRICT");
        public final static Property Year = new Property(6, int.class, "year", false, "YEAR");
        public final static Property VenueAddress = new Property(7, String.class, "venueAddress", false, "VENUE_ADDRESS");
        public final static Property Website = new Property(8, String.class, "website", false, "WEBSITE");
        public final static Property StartDate = new Property(9, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(10, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property Official = new Property(11, Boolean.class, "official", false, "OFFICIAL");
    };

    private DaoSession daoSession;


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MODIFIED' INTEGER NOT NULL ," + // 1: modified
                "'SHORT_NAME' TEXT NOT NULL ," + // 2: shortName
                "'EVENT_CODE' TEXT NOT NULL UNIQUE ," + // 3: eventCode
                "'EVENT_TYPE' INTEGER NOT NULL ," + // 4: eventType
                "'EVENT_DISTRICT' INTEGER NOT NULL ," + // 5: eventDistrict
                "'YEAR' INTEGER NOT NULL ," + // 6: year
                "'VENUE_ADDRESS' TEXT," + // 7: venueAddress
                "'WEBSITE' TEXT," + // 8: website
                "'START_DATE' INTEGER," + // 9: startDate
                "'END_DATE' INTEGER," + // 10: endDate
                "'OFFICIAL' INTEGER);"); // 11: official
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getModified().getTime());
        stmt.bindString(3, entity.getShortName());
        stmt.bindString(4, entity.getEventCode());
        stmt.bindLong(5, entity.getEventType());
        stmt.bindLong(6, entity.getEventDistrict());
        stmt.bindLong(7, entity.getYear());
 
        String venueAddress = entity.getVenueAddress();
        if (venueAddress != null) {
            stmt.bindString(8, venueAddress);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(9, website);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(10, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(11, endDate.getTime());
        }
 
        Boolean official = entity.getOfficial();
        if (official != null) {
            stmt.bindLong(12, official ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Event entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // modified
            cursor.getString(offset + 2), // shortName
            cursor.getString(offset + 3), // eventCode
            cursor.getInt(offset + 4), // eventType
            cursor.getInt(offset + 5), // eventDistrict
            cursor.getInt(offset + 6), // year
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // venueAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // website
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // startDate
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // endDate
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // official
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModified(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setShortName(cursor.getString(offset + 2));
        entity.setEventCode(cursor.getString(offset + 3));
        entity.setEventType(cursor.getInt(offset + 4));
        entity.setEventDistrict(cursor.getInt(offset + 5));
        entity.setYear(cursor.getInt(offset + 6));
        entity.setVenueAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWebsite(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStartDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setEndDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setOfficial(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
