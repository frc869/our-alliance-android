package com.mechinn.android.ouralliance.greenDao;

import java.util.List;
import com.mechinn.android.ouralliance.greenDao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mechinn.android.ouralliance.greenDao.dao.EventDao;
import com.mechinn.android.ouralliance.greenDao.dao.MatchDao;
import com.mechinn.android.ouralliance.greenDao.dao.MatchScouting2014Dao;
import com.mechinn.android.ouralliance.greenDao.dao.MultimediaDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MATCH.
 */
public class Match extends com.mechinn.android.ouralliance.OurAllianceObject  implements Comparable<Match> {

    private Long id;
    /** Not-null value. */
    private java.util.Date modified;
    /** Not-null value. */
    private String compLevel;
    private Integer setNumber;
    private java.util.Date time;
    private Integer redScore;
    private Integer blueScore;
    private Integer matchNum;
    private Long eventId;
    private Long multimediaId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MatchDao myDao;

    private Event event;
    private Long event__resolvedKey;

    private List<MatchScouting2014> teams;
    private List<Multimedia> multimedia;

    // KEEP FIELDS - put your custom fields here
    public final static String TAG = "Match";
    // KEEP FIELDS END

    public Match() {
    }

    public Match(Long id) {
        this.id = id;
    }

    public Match(Long id, java.util.Date modified, String compLevel, Integer setNumber, java.util.Date time, Integer redScore, Integer blueScore, Integer matchNum, Long eventId, Long multimediaId) {
        this.id = id;
        this.modified = modified;
        this.compLevel = compLevel;
        this.setNumber = setNumber;
        this.time = time;
        this.redScore = redScore;
        this.blueScore = blueScore;
        this.matchNum = matchNum;
        this.eventId = eventId;
        this.multimediaId = multimediaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMatchDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getModified() {
        return modified;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModified(java.util.Date modified) {
        this.modified = modified;
    }

    /** Not-null value. */
    public String getCompLevel() {
        return compLevel;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCompLevel(String compLevel) {
        this.compLevel = compLevel;
    }

    public Integer getSetNumber() {
        return setNumber;
    }

    public void setSetNumber(Integer setNumber) {
        this.setNumber = setNumber;
    }

    public java.util.Date getTime() {
        return time;
    }

    public void setTime(java.util.Date time) {
        this.time = time;
    }

    public Integer getRedScore() {
        return redScore;
    }

    public void setRedScore(Integer redScore) {
        this.redScore = redScore;
    }

    public Integer getBlueScore() {
        return blueScore;
    }

    public void setBlueScore(Integer blueScore) {
        this.blueScore = blueScore;
    }

    public Integer getMatchNum() {
        return matchNum;
    }

    public void setMatchNum(Integer matchNum) {
        this.matchNum = matchNum;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public Long getMultimediaId() {
        return multimediaId;
    }

    public void setMultimediaId(Long multimediaId) {
        this.multimediaId = multimediaId;
    }

    /** To-one relationship, resolved on first access. */
    public Event getEvent() {
        Long __key = this.eventId;
        if (event__resolvedKey == null || !event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            Event eventNew = targetDao.load(__key);
            synchronized (this) {
                event = eventNew;
            	event__resolvedKey = __key;
            }
        }
        return event;
    }

    public void setEvent(Event event) {
        synchronized (this) {
            this.event = event;
            eventId = event == null ? null : event.getId();
            event__resolvedKey = eventId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MatchScouting2014> getTeams() {
        if (teams == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchScouting2014Dao targetDao = daoSession.getMatchScouting2014Dao();
            List<MatchScouting2014> teamsNew = targetDao._queryMatch_Teams(id);
            synchronized (this) {
                if(teams == null) {
                    teams = teamsNew;
                }
            }
        }
        return teams;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeams() {
        teams = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Multimedia> getMultimedia() {
        if (multimedia == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MultimediaDao targetDao = daoSession.getMultimediaDao();
            List<Multimedia> multimediaNew = targetDao._queryMatch_Multimedia(id);
            synchronized (this) {
                if(multimedia == null) {
                    multimedia = multimediaNew;
                }
            }
        }
        return multimedia;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMultimedia() {
        multimedia = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public enum CompetitionLevel {
        EIGHTH_FINALS,
        QUARTER_FINALS,
        SEMI_FINALS,
        FINALS,
        QUALIFIER,
        PRACTICE;
        public String getValue() {
            switch(this) {
                case EIGHTH_FINALS:
                    return "ef";
                case QUARTER_FINALS:
                    return "qf";
                case SEMI_FINALS:
                    return "sf";
                case FINALS:
                    return "f";
                default:
                    return "qm";
            }
        }
        public String toString() {
            switch(this) {
                case EIGHTH_FINALS:
                    return "Eigtht Finals";
                case QUARTER_FINALS:
                    return "Quarter Finals";
                case SEMI_FINALS:
                    return "Semi Finals";
                case FINALS:
                    return "Finals";
                default:
                    return "Qualifier";
            }
        }
    }
    public CompetitionLevel getLevelFromCompLevel() {
        if(this.getCompLevel().equals("ef")) {
            return CompetitionLevel.EIGHTH_FINALS;
        } else if(this.getCompLevel().equals("qf")) {
            return CompetitionLevel.QUARTER_FINALS;
        } else if(this.getCompLevel().equals("sf")) {
            return CompetitionLevel.SEMI_FINALS;
        } else if(this.getCompLevel().equals("f")) {
            return CompetitionLevel.FINALS;
        } else {
            return CompetitionLevel.QUALIFIER;
        }
    }
    public String toString() {
        switch(getLevelFromCompLevel()) {
            case PRACTICE:
                return "Practice: "+this.getMatchNum();
            case QUARTER_FINALS:
                return "Quarterfinal: "+getSetNumber()+" Match: "+getMatchNum();
            case SEMI_FINALS:
                return "Semifinal: "+ getSetNumber()+" Match: "+getMatchNum();
            case FINALS:
                return "Final: "+getMatchNum();
            default:
                return "Qualifier: "+this.getMatchNum();
        }
    }
    public boolean equals(Object data) {
        if(!(data instanceof Match)) {
            return false;
        }
        return  getEvent().equals(((Match)data).getEvent()) &&
                getCompLevel().equals(((Match)data).getCompLevel()) &&
                getSetNumber()==((Match)data).getSetNumber() &&
                getTime().equals(((Match)data).getTime()) &&
                getRedScore()==((Match)data).getRedScore() &&
                getBlueScore()==((Match)data).getBlueScore() &&
                getMatchNum()==((Match)data).getMatchNum();
    }
    public int compareTo(Match another) {
        return this.getMatchNum() - another.getMatchNum();
    }
    // KEEP METHODS END

}
