package com.mechinn.android.ouralliance.greenDao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.mechinn.android.ouralliance.greenDao.Team;

import com.mechinn.android.ouralliance.greenDao.TeamScouting2014;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEAM_SCOUTING2014.
*/
public class TeamScouting2014Dao extends AbstractDao<TeamScouting2014, Long> {

    public static final String TABLENAME = "TEAM_SCOUTING2014";

    /**
     * Properties of entity TeamScouting2014.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modified = new Property(1, java.util.Date.class, "modified", false, "MODIFIED");
        public final static Property TeamId = new Property(2, long.class, "teamId", false, "TEAM_ID");
        public final static Property Notes = new Property(3, String.class, "notes", false, "NOTES");
        public final static Property Orientation = new Property(4, String.class, "orientation", false, "ORIENTATION");
        public final static Property DriveTrain = new Property(5, String.class, "driveTrain", false, "DRIVE_TRAIN");
        public final static Property Width = new Property(6, Double.class, "width", false, "WIDTH");
        public final static Property Length = new Property(7, Double.class, "length", false, "LENGTH");
        public final static Property HeightShooter = new Property(8, Double.class, "heightShooter", false, "HEIGHT_SHOOTER");
        public final static Property HeightMax = new Property(9, Double.class, "heightMax", false, "HEIGHT_MAX");
        public final static Property ShooterType = new Property(10, Integer.class, "shooterType", false, "SHOOTER_TYPE");
        public final static Property LowGoal = new Property(11, Boolean.class, "lowGoal", false, "LOW_GOAL");
        public final static Property HighGoal = new Property(12, Boolean.class, "highGoal", false, "HIGH_GOAL");
        public final static Property ShootingDistance = new Property(13, Double.class, "shootingDistance", false, "SHOOTING_DISTANCE");
        public final static Property PassGround = new Property(14, Boolean.class, "passGround", false, "PASS_GROUND");
        public final static Property PassAir = new Property(15, Boolean.class, "passAir", false, "PASS_AIR");
        public final static Property PassTruss = new Property(16, Boolean.class, "passTruss", false, "PASS_TRUSS");
        public final static Property PickupGround = new Property(17, Boolean.class, "pickupGround", false, "PICKUP_GROUND");
        public final static Property PickupCatch = new Property(18, Boolean.class, "pickupCatch", false, "PICKUP_CATCH");
        public final static Property Pusher = new Property(19, Boolean.class, "pusher", false, "PUSHER");
        public final static Property Blocker = new Property(20, Boolean.class, "blocker", false, "BLOCKER");
        public final static Property HumanPlayer = new Property(21, Double.class, "humanPlayer", false, "HUMAN_PLAYER");
        public final static Property NoAuto = new Property(22, Boolean.class, "noAuto", false, "NO_AUTO");
        public final static Property DriveAuto = new Property(23, Boolean.class, "driveAuto", false, "DRIVE_AUTO");
        public final static Property LowAuto = new Property(24, Boolean.class, "lowAuto", false, "LOW_AUTO");
        public final static Property HighAuto = new Property(25, Boolean.class, "highAuto", false, "HIGH_AUTO");
        public final static Property HotAuto = new Property(26, Boolean.class, "hotAuto", false, "HOT_AUTO");
        public final static Property MultimediaId = new Property(27, Long.class, "multimediaId", false, "MULTIMEDIA_ID");
    };

    private DaoSession daoSession;


    public TeamScouting2014Dao(DaoConfig config) {
        super(config);
    }
    
    public TeamScouting2014Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEAM_SCOUTING2014' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MODIFIED' INTEGER NOT NULL ," + // 1: modified
                "'TEAM_ID' INTEGER NOT NULL UNIQUE ," + // 2: teamId
                "'NOTES' TEXT," + // 3: notes
                "'ORIENTATION' TEXT," + // 4: orientation
                "'DRIVE_TRAIN' TEXT," + // 5: driveTrain
                "'WIDTH' REAL," + // 6: width
                "'LENGTH' REAL," + // 7: length
                "'HEIGHT_SHOOTER' REAL," + // 8: heightShooter
                "'HEIGHT_MAX' REAL," + // 9: heightMax
                "'SHOOTER_TYPE' INTEGER," + // 10: shooterType
                "'LOW_GOAL' INTEGER," + // 11: lowGoal
                "'HIGH_GOAL' INTEGER," + // 12: highGoal
                "'SHOOTING_DISTANCE' REAL," + // 13: shootingDistance
                "'PASS_GROUND' INTEGER," + // 14: passGround
                "'PASS_AIR' INTEGER," + // 15: passAir
                "'PASS_TRUSS' INTEGER," + // 16: passTruss
                "'PICKUP_GROUND' INTEGER," + // 17: pickupGround
                "'PICKUP_CATCH' INTEGER," + // 18: pickupCatch
                "'PUSHER' INTEGER," + // 19: pusher
                "'BLOCKER' INTEGER," + // 20: blocker
                "'HUMAN_PLAYER' REAL," + // 21: humanPlayer
                "'NO_AUTO' INTEGER," + // 22: noAuto
                "'DRIVE_AUTO' INTEGER," + // 23: driveAuto
                "'LOW_AUTO' INTEGER," + // 24: lowAuto
                "'HIGH_AUTO' INTEGER," + // 25: highAuto
                "'HOT_AUTO' INTEGER," + // 26: hotAuto
                "'MULTIMEDIA_ID' INTEGER);"); // 27: multimediaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEAM_SCOUTING2014'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeamScouting2014 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getModified().getTime());
        stmt.bindLong(3, entity.getTeamId());
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(4, notes);
        }
 
        String orientation = entity.getOrientation();
        if (orientation != null) {
            stmt.bindString(5, orientation);
        }
 
        String driveTrain = entity.getDriveTrain();
        if (driveTrain != null) {
            stmt.bindString(6, driveTrain);
        }
 
        Double width = entity.getWidth();
        if (width != null) {
            stmt.bindDouble(7, width);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(8, length);
        }
 
        Double heightShooter = entity.getHeightShooter();
        if (heightShooter != null) {
            stmt.bindDouble(9, heightShooter);
        }
 
        Double heightMax = entity.getHeightMax();
        if (heightMax != null) {
            stmt.bindDouble(10, heightMax);
        }
 
        Integer shooterType = entity.getShooterType();
        if (shooterType != null) {
            stmt.bindLong(11, shooterType);
        }
 
        Boolean lowGoal = entity.getLowGoal();
        if (lowGoal != null) {
            stmt.bindLong(12, lowGoal ? 1l: 0l);
        }
 
        Boolean highGoal = entity.getHighGoal();
        if (highGoal != null) {
            stmt.bindLong(13, highGoal ? 1l: 0l);
        }
 
        Double shootingDistance = entity.getShootingDistance();
        if (shootingDistance != null) {
            stmt.bindDouble(14, shootingDistance);
        }
 
        Boolean passGround = entity.getPassGround();
        if (passGround != null) {
            stmt.bindLong(15, passGround ? 1l: 0l);
        }
 
        Boolean passAir = entity.getPassAir();
        if (passAir != null) {
            stmt.bindLong(16, passAir ? 1l: 0l);
        }
 
        Boolean passTruss = entity.getPassTruss();
        if (passTruss != null) {
            stmt.bindLong(17, passTruss ? 1l: 0l);
        }
 
        Boolean pickupGround = entity.getPickupGround();
        if (pickupGround != null) {
            stmt.bindLong(18, pickupGround ? 1l: 0l);
        }
 
        Boolean pickupCatch = entity.getPickupCatch();
        if (pickupCatch != null) {
            stmt.bindLong(19, pickupCatch ? 1l: 0l);
        }
 
        Boolean pusher = entity.getPusher();
        if (pusher != null) {
            stmt.bindLong(20, pusher ? 1l: 0l);
        }
 
        Boolean blocker = entity.getBlocker();
        if (blocker != null) {
            stmt.bindLong(21, blocker ? 1l: 0l);
        }
 
        Double humanPlayer = entity.getHumanPlayer();
        if (humanPlayer != null) {
            stmt.bindDouble(22, humanPlayer);
        }
 
        Boolean noAuto = entity.getNoAuto();
        if (noAuto != null) {
            stmt.bindLong(23, noAuto ? 1l: 0l);
        }
 
        Boolean driveAuto = entity.getDriveAuto();
        if (driveAuto != null) {
            stmt.bindLong(24, driveAuto ? 1l: 0l);
        }
 
        Boolean lowAuto = entity.getLowAuto();
        if (lowAuto != null) {
            stmt.bindLong(25, lowAuto ? 1l: 0l);
        }
 
        Boolean highAuto = entity.getHighAuto();
        if (highAuto != null) {
            stmt.bindLong(26, highAuto ? 1l: 0l);
        }
 
        Boolean hotAuto = entity.getHotAuto();
        if (hotAuto != null) {
            stmt.bindLong(27, hotAuto ? 1l: 0l);
        }
 
        Long multimediaId = entity.getMultimediaId();
        if (multimediaId != null) {
            stmt.bindLong(28, multimediaId);
        }
    }

    @Override
    protected void attachEntity(TeamScouting2014 entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TeamScouting2014 readEntity(Cursor cursor, int offset) {
        TeamScouting2014 entity = new TeamScouting2014( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // modified
            cursor.getLong(offset + 2), // teamId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // notes
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orientation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // driveTrain
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // width
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // length
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // heightShooter
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // heightMax
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // shooterType
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // lowGoal
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // highGoal
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // shootingDistance
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // passGround
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // passAir
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // passTruss
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // pickupGround
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // pickupCatch
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // pusher
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // blocker
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // humanPlayer
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // noAuto
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // driveAuto
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // lowAuto
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // highAuto
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // hotAuto
            cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27) // multimediaId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeamScouting2014 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModified(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTeamId(cursor.getLong(offset + 2));
        entity.setNotes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrientation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDriveTrain(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWidth(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLength(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setHeightShooter(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setHeightMax(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setShooterType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setLowGoal(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setHighGoal(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setShootingDistance(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setPassGround(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setPassAir(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setPassTruss(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setPickupGround(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setPickupCatch(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setPusher(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setBlocker(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setHumanPlayer(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setNoAuto(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setDriveAuto(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setLowAuto(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setHighAuto(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setHotAuto(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setMultimediaId(cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TeamScouting2014 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TeamScouting2014 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTeamDao().getAllColumns());
            builder.append(" FROM TEAM_SCOUTING2014 T");
            builder.append(" LEFT JOIN TEAM T0 ON T.'TEAM_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TeamScouting2014 loadCurrentDeep(Cursor cursor, boolean lock) {
        TeamScouting2014 entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Team team = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
         if(team != null) {
            entity.setTeam(team);
        }

        return entity;    
    }

    public TeamScouting2014 loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TeamScouting2014> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TeamScouting2014> list = new ArrayList<TeamScouting2014>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TeamScouting2014> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TeamScouting2014> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
