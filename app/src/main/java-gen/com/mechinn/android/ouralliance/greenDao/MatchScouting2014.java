package com.mechinn.android.ouralliance.greenDao;

import java.util.List;
import com.mechinn.android.ouralliance.greenDao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mechinn.android.ouralliance.greenDao.dao.MatchDao;
import com.mechinn.android.ouralliance.greenDao.dao.MatchScouting2014Dao;
import com.mechinn.android.ouralliance.greenDao.dao.MultimediaDao;
import com.mechinn.android.ouralliance.greenDao.dao.TeamScouting2014Dao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.mechinn.android.ouralliance.data.TeamScouting;
// KEEP INCLUDES END
/**
 * Entity mapped to table MATCH_SCOUTING2014.
 */
public class MatchScouting2014 extends com.mechinn.android.ouralliance.data.MatchScouting  {

    private Long id;
    /** Not-null value. */
    private java.util.Date modified;
    private long matchId;
    private long teamId;
    private Boolean alliance;
    private Integer position;
    private String notes;
    private Integer hotShots;
    private Integer shotsMade;
    private Integer shotsMissed;
    private Double moveForward;
    private Boolean shooter;
    private Boolean catcher;
    private Boolean passer;
    private Double driveTrainRating;
    private Double ballAccuracyRating;
    private Boolean ground;
    private Boolean overTruss;
    private Boolean low;
    private Boolean high;
    private Long multimediaId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MatchScouting2014Dao myDao;

    private Match match;
    private Long match__resolvedKey;

    private TeamScouting2014 teamScouting2014;
    private Long teamScouting2014__resolvedKey;

    private List<Multimedia> multimedia;

    // KEEP FIELDS - put your custom fields here
    public final static String TAG = "MatchScouting2014";
    // KEEP FIELDS END

    public MatchScouting2014() {
    }

    public MatchScouting2014(Long id) {
        this.id = id;
    }

    public MatchScouting2014(Long id, java.util.Date modified, long matchId, long teamId, Boolean alliance, Integer position, String notes, Integer hotShots, Integer shotsMade, Integer shotsMissed, Double moveForward, Boolean shooter, Boolean catcher, Boolean passer, Double driveTrainRating, Double ballAccuracyRating, Boolean ground, Boolean overTruss, Boolean low, Boolean high, Long multimediaId) {
        this.id = id;
        this.modified = modified;
        this.matchId = matchId;
        this.teamId = teamId;
        this.alliance = alliance;
        this.position = position;
        this.notes = notes;
        this.hotShots = hotShots;
        this.shotsMade = shotsMade;
        this.shotsMissed = shotsMissed;
        this.moveForward = moveForward;
        this.shooter = shooter;
        this.catcher = catcher;
        this.passer = passer;
        this.driveTrainRating = driveTrainRating;
        this.ballAccuracyRating = ballAccuracyRating;
        this.ground = ground;
        this.overTruss = overTruss;
        this.low = low;
        this.high = high;
        this.multimediaId = multimediaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMatchScouting2014Dao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getModified() {
        return modified;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModified(java.util.Date modified) {
        this.modified = modified;
    }

    public long getMatchId() {
        return matchId;
    }

    public void setMatchId(long matchId) {
        this.matchId = matchId;
    }

    public long getTeamId() {
        return teamId;
    }

    public void setTeamId(long teamId) {
        this.teamId = teamId;
    }

    public Boolean getAlliance() {
        return alliance;
    }

    public void setAlliance(Boolean alliance) {
        this.alliance = alliance;
    }

    public Integer getPosition() {
        return position;
    }

    public void setPosition(Integer position) {
        this.position = position;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public Integer getHotShots() {
        return hotShots;
    }

    public void setHotShots(Integer hotShots) {
        this.hotShots = hotShots;
    }

    public Integer getShotsMade() {
        return shotsMade;
    }

    public void setShotsMade(Integer shotsMade) {
        this.shotsMade = shotsMade;
    }

    public Integer getShotsMissed() {
        return shotsMissed;
    }

    public void setShotsMissed(Integer shotsMissed) {
        this.shotsMissed = shotsMissed;
    }

    public Double getMoveForward() {
        return moveForward;
    }

    public void setMoveForward(Double moveForward) {
        this.moveForward = moveForward;
    }

    public Boolean getShooter() {
        return shooter;
    }

    public void setShooter(Boolean shooter) {
        this.shooter = shooter;
    }

    public Boolean getCatcher() {
        return catcher;
    }

    public void setCatcher(Boolean catcher) {
        this.catcher = catcher;
    }

    public Boolean getPasser() {
        return passer;
    }

    public void setPasser(Boolean passer) {
        this.passer = passer;
    }

    public Double getDriveTrainRating() {
        return driveTrainRating;
    }

    public void setDriveTrainRating(Double driveTrainRating) {
        this.driveTrainRating = driveTrainRating;
    }

    public Double getBallAccuracyRating() {
        return ballAccuracyRating;
    }

    public void setBallAccuracyRating(Double ballAccuracyRating) {
        this.ballAccuracyRating = ballAccuracyRating;
    }

    public Boolean getGround() {
        return ground;
    }

    public void setGround(Boolean ground) {
        this.ground = ground;
    }

    public Boolean getOverTruss() {
        return overTruss;
    }

    public void setOverTruss(Boolean overTruss) {
        this.overTruss = overTruss;
    }

    public Boolean getLow() {
        return low;
    }

    public void setLow(Boolean low) {
        this.low = low;
    }

    public Boolean getHigh() {
        return high;
    }

    public void setHigh(Boolean high) {
        this.high = high;
    }

    public Long getMultimediaId() {
        return multimediaId;
    }

    public void setMultimediaId(Long multimediaId) {
        this.multimediaId = multimediaId;
    }

    /** To-one relationship, resolved on first access. */
    public Match getMatch() {
        long __key = this.matchId;
        if (match__resolvedKey == null || !match__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchDao targetDao = daoSession.getMatchDao();
            Match matchNew = targetDao.load(__key);
            synchronized (this) {
                match = matchNew;
            	match__resolvedKey = __key;
            }
        }
        return match;
    }

    public void setMatch(Match match) {
        if (match == null) {
            throw new DaoException("To-one property 'matchId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.match = match;
            matchId = match.getId();
            match__resolvedKey = matchId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public TeamScouting2014 getTeamScouting2014() {
        long __key = this.teamId;
        if (teamScouting2014__resolvedKey == null || !teamScouting2014__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamScouting2014Dao targetDao = daoSession.getTeamScouting2014Dao();
            TeamScouting2014 teamScouting2014New = targetDao.load(__key);
            synchronized (this) {
                teamScouting2014 = teamScouting2014New;
            	teamScouting2014__resolvedKey = __key;
            }
        }
        return teamScouting2014;
    }

    public void setTeamScouting2014(TeamScouting2014 teamScouting2014) {
        if (teamScouting2014 == null) {
            throw new DaoException("To-one property 'teamId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teamScouting2014 = teamScouting2014;
            teamId = teamScouting2014.getId();
            teamScouting2014__resolvedKey = teamId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Multimedia> getMultimedia() {
        if (multimedia == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MultimediaDao targetDao = daoSession.getMultimediaDao();
            List<Multimedia> multimediaNew = targetDao._queryMatchScouting2014_Multimedia(id);
            synchronized (this) {
                if(multimedia == null) {
                    multimedia = multimediaNew;
                }
            }
        }
        return multimedia;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMultimedia() {
        multimedia = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public TeamScouting getTeamScouting() {
        return this.getTeamScouting2014();
    }

    @Override
    public void setTeamScouting(TeamScouting teamScouting) {
        this.setTeamScouting2014((TeamScouting2014) teamScouting);
    }
    public String toString() {
        return this.getMatch()+" - "+this.getAlliance()+": "+this.getTeamScouting2014().getTeam();
    }
    public int compareTo(MatchScouting2014 another) {
        int compare = (this.getAlliance()?1:0) - (another.getAlliance()?1:0);
        if(0==compare) {
            compare = this.getTeamScouting2014().getTeam().compareTo(another.getTeamScouting2014().getTeam());
        }
        return compare;
    }
    public boolean equals(Object data) {
        if(!(data instanceof MatchScouting2014)) {
            return false;
        }
        return  getMatch().equals(((MatchScouting2014)data).getMatch()) &&
                getTeamScouting2014().equals(((MatchScouting2014)data).getTeamScouting2014()) &&
                getAlliance()==((MatchScouting2014)data).getAlliance() &&
                getNotes().equals(((MatchScouting2014)data).getNotes()) &&
                getHotShots()==((MatchScouting2014)data).getHotShots() &&
                getShotsMade()==((MatchScouting2014)data).getShotsMade() &&
                getShotsMissed()==((MatchScouting2014)data).getShotsMissed() &&
                getMoveForward()==((MatchScouting2014)data).getMoveForward() &&
                getShooter()==((MatchScouting2014)data).getShooter() &&
                getCatcher()==((MatchScouting2014)data).getCatcher() &&
                getPasser()==((MatchScouting2014)data).getPasser() &&
                getDriveTrainRating()==((MatchScouting2014)data).getDriveTrainRating() &&
                getBallAccuracyRating()==((MatchScouting2014)data).getBallAccuracyRating() &&
                getGround()==((MatchScouting2014)data).getGround() &&
                getOverTruss()==((MatchScouting2014)data).getOverTruss() &&
                getLow()==((MatchScouting2014)data).getLow() &&
                getHigh()==((MatchScouting2014)data).getHigh();
    }
    // KEEP METHODS END

}
