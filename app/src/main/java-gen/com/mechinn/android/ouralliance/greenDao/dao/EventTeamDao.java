package com.mechinn.android.ouralliance.greenDao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mechinn.android.ouralliance.greenDao.Event;
import com.mechinn.android.ouralliance.greenDao.Team;

import com.mechinn.android.ouralliance.greenDao.EventTeam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT_TEAM.
*/
public class EventTeamDao extends AbstractDao<EventTeam, Long> {

    public static final String TABLENAME = "EVENT_TEAM";

    /**
     * Properties of entity EventTeam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modified = new Property(1, java.util.Date.class, "modified", false, "MODIFIED");
        public final static Property EventId = new Property(2, long.class, "eventId", false, "EVENT_ID");
        public final static Property TeamId = new Property(3, long.class, "teamId", false, "TEAM_ID");
        public final static Property Rank = new Property(4, Integer.class, "rank", false, "RANK");
        public final static Property Scouted = new Property(5, Boolean.class, "scouted", false, "SCOUTED");
    };

    private DaoSession daoSession;

    private Query<EventTeam> event_TeamsQuery;
    private Query<EventTeam> team_EventsQuery;

    public EventTeamDao(DaoConfig config) {
        super(config);
    }
    
    public EventTeamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT_TEAM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MODIFIED' INTEGER NOT NULL ," + // 1: modified
                "'EVENT_ID' INTEGER NOT NULL ," + // 2: eventId
                "'TEAM_ID' INTEGER NOT NULL ," + // 3: teamId
                "'RANK' INTEGER," + // 4: rank
                "'SCOUTED' INTEGER);"); // 5: scouted
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EVENT_TEAM_EVENT_ID_TEAM_ID ON EVENT_TEAM" +
                " (EVENT_ID,TEAM_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT_TEAM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EventTeam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getModified().getTime());
        stmt.bindLong(3, entity.getEventId());
        stmt.bindLong(4, entity.getTeamId());
 
        Integer rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(5, rank);
        }
 
        Boolean scouted = entity.getScouted();
        if (scouted != null) {
            stmt.bindLong(6, scouted ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(EventTeam entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EventTeam readEntity(Cursor cursor, int offset) {
        EventTeam entity = new EventTeam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // modified
            cursor.getLong(offset + 2), // eventId
            cursor.getLong(offset + 3), // teamId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // rank
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // scouted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EventTeam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModified(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEventId(cursor.getLong(offset + 2));
        entity.setTeamId(cursor.getLong(offset + 3));
        entity.setRank(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setScouted(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EventTeam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EventTeam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teams" to-many relationship of Event. */
    public List<EventTeam> _queryEvent_Teams(long eventId) {
        synchronized (this) {
            if (event_TeamsQuery == null) {
                QueryBuilder<EventTeam> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                event_TeamsQuery = queryBuilder.build();
            }
        }
        Query<EventTeam> query = event_TeamsQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

    /** Internal query to resolve the "events" to-many relationship of Team. */
    public List<EventTeam> _queryTeam_Events(long eventId) {
        synchronized (this) {
            if (team_EventsQuery == null) {
                QueryBuilder<EventTeam> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                team_EventsQuery = queryBuilder.build();
            }
        }
        Query<EventTeam> query = team_EventsQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEventDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTeamDao().getAllColumns());
            builder.append(" FROM EVENT_TEAM T");
            builder.append(" LEFT JOIN EVENT T0 ON T.'EVENT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN TEAM T1 ON T.'TEAM_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected EventTeam loadCurrentDeep(Cursor cursor, boolean lock) {
        EventTeam entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
         if(event != null) {
            entity.setEvent(event);
        }
        offset += daoSession.getEventDao().getAllColumns().length;

        Team team = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
         if(team != null) {
            entity.setTeam(team);
        }

        return entity;    
    }

    public EventTeam loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EventTeam> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EventTeam> list = new ArrayList<EventTeam>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EventTeam> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EventTeam> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
