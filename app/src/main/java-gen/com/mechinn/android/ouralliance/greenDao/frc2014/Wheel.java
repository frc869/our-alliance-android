package com.mechinn.android.ouralliance.greenDao.frc2014;

import com.mechinn.android.ouralliance.greenDao.frc2014.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mechinn.android.ouralliance.greenDao.frc2014.dao.TeamScoutingDao;
import com.mechinn.android.ouralliance.greenDao.frc2014.dao.WheelDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table WHEEL.
 */
public class Wheel {

    private Long id;
    private java.util.Date modified;
    private Long team;
    private String wheelType;
    private Double wheelSize;
    private Integer wheelCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WheelDao myDao;

    private TeamScouting teamScouting;
    private Long teamScouting__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Wheel() {
    }

    public Wheel(Long id) {
        this.id = id;
    }

    public Wheel(Long id, java.util.Date modified, Long team, String wheelType, Double wheelSize, Integer wheelCount) {
        this.id = id;
        this.modified = modified;
        this.team = team;
        this.wheelType = wheelType;
        this.wheelSize = wheelSize;
        this.wheelCount = wheelCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWheelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getModified() {
        return modified;
    }

    public void setModified(java.util.Date modified) {
        this.modified = modified;
    }

    public Long getTeam() {
        return team;
    }

    public void setTeam(Long team) {
        this.team = team;
    }

    public String getWheelType() {
        return wheelType;
    }

    public void setWheelType(String wheelType) {
        this.wheelType = wheelType;
    }

    public Double getWheelSize() {
        return wheelSize;
    }

    public void setWheelSize(Double wheelSize) {
        this.wheelSize = wheelSize;
    }

    public Integer getWheelCount() {
        return wheelCount;
    }

    public void setWheelCount(Integer wheelCount) {
        this.wheelCount = wheelCount;
    }

    /** To-one relationship, resolved on first access. */
    public TeamScouting getTeamScouting() {
        Long __key = this.team;
        if (teamScouting__resolvedKey == null || !teamScouting__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamScoutingDao targetDao = daoSession.getTeamScoutingDao();
            TeamScouting teamScoutingNew = targetDao.load(__key);
            synchronized (this) {
                teamScouting = teamScoutingNew;
            	teamScouting__resolvedKey = __key;
            }
        }
        return teamScouting;
    }

    public void setTeamScouting(TeamScouting teamScouting) {
        synchronized (this) {
            this.teamScouting = teamScouting;
            team = teamScouting == null ? null : teamScouting.getId();
            teamScouting__resolvedKey = team;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
