package com.mechinn.android.ouralliance.greenDao.frc2014;

import com.mechinn.android.ouralliance.greenDao.frc2014.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mechinn.android.ouralliance.greenDao.frc2014.dao.CompetitionDao;
import com.mechinn.android.ouralliance.greenDao.frc2014.dao.CompetitionTeamDao;
import com.mechinn.android.ouralliance.greenDao.frc2014.dao.TeamDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table COMPETITION_TEAM.
 */
public class CompetitionTeam {

    private Long id;
    private java.util.Date modified;
    private Long competition;
    private Long team;
    private Integer rank;
    private Boolean scouted;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CompetitionTeamDao myDao;

    private Competition competition;
    private Long competition__resolvedKey;

    private Team team;
    private Long team__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CompetitionTeam() {
    }

    public CompetitionTeam(Long id) {
        this.id = id;
    }

    public CompetitionTeam(Long id, java.util.Date modified, Long competition, Long team, Integer rank, Boolean scouted) {
        this.id = id;
        this.modified = modified;
        this.competition = competition;
        this.team = team;
        this.rank = rank;
        this.scouted = scouted;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCompetitionTeamDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getModified() {
        return modified;
    }

    public void setModified(java.util.Date modified) {
        this.modified = modified;
    }

    public Long getCompetition() {
        return competition;
    }

    public void setCompetition(Long competition) {
        this.competition = competition;
    }

    public Long getTeam() {
        return team;
    }

    public void setTeam(Long team) {
        this.team = team;
    }

    public Integer getRank() {
        return rank;
    }

    public void setRank(Integer rank) {
        this.rank = rank;
    }

    public Boolean getScouted() {
        return scouted;
    }

    public void setScouted(Boolean scouted) {
        this.scouted = scouted;
    }

    /** To-one relationship, resolved on first access. */
    public Competition getCompetition() {
        Long __key = this.competition;
        if (competition__resolvedKey == null || !competition__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CompetitionDao targetDao = daoSession.getCompetitionDao();
            Competition competitionNew = targetDao.load(__key);
            synchronized (this) {
                competition = competitionNew;
            	competition__resolvedKey = __key;
            }
        }
        return competition;
    }

    public void setCompetition(Competition competition) {
        synchronized (this) {
            this.competition = competition;
            competition = competition == null ? null : competition.getId();
            competition__resolvedKey = competition;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Team getTeam() {
        Long __key = this.team;
        if (team__resolvedKey == null || !team__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamDao targetDao = daoSession.getTeamDao();
            Team teamNew = targetDao.load(__key);
            synchronized (this) {
                team = teamNew;
            	team__resolvedKey = __key;
            }
        }
        return team;
    }

    public void setTeam(Team team) {
        synchronized (this) {
            this.team = team;
            team = team == null ? null : team.getId();
            team__resolvedKey = team;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
