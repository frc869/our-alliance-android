package com.mechinn.android.ouralliance.greenDao;

import com.mechinn.android.ouralliance.greenDao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mechinn.android.ouralliance.greenDao.dao.TeamScouting2014Dao;
import com.mechinn.android.ouralliance.greenDao.dao.WheelDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table WHEEL.
 */
public class Wheel extends com.mechinn.android.ouralliance.OurAllianceObject  implements Comparable<Wheel> {

    private Long id;
    /** Not-null value. */
    private java.util.Date modified;
    private long teamId;
    /** Not-null value. */
    private String wheelType;
    private double wheelSize;
    private int wheelCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WheelDao myDao;

    private TeamScouting2014 teamScouting2014;
    private Long teamScouting2014__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public final static String TAG = "Wheel";
    // KEEP FIELDS END

    public Wheel() {
    }

    public Wheel(Long id) {
        this.id = id;
    }

    public Wheel(Long id, java.util.Date modified, long teamId, String wheelType, double wheelSize, int wheelCount) {
        this.id = id;
        this.modified = modified;
        this.teamId = teamId;
        this.wheelType = wheelType;
        this.wheelSize = wheelSize;
        this.wheelCount = wheelCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWheelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getModified() {
        return modified;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModified(java.util.Date modified) {
        this.modified = modified;
    }

    public long getTeamId() {
        return teamId;
    }

    public void setTeamId(long teamId) {
        this.teamId = teamId;
    }

    /** Not-null value. */
    public String getWheelType() {
        return wheelType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setWheelType(String wheelType) {
        this.wheelType = wheelType;
    }

    public double getWheelSize() {
        return wheelSize;
    }

    public void setWheelSize(double wheelSize) {
        this.wheelSize = wheelSize;
    }

    public int getWheelCount() {
        return wheelCount;
    }

    public void setWheelCount(int wheelCount) {
        this.wheelCount = wheelCount;
    }

    /** To-one relationship, resolved on first access. */
    public TeamScouting2014 getTeamScouting2014() {
        long __key = this.teamId;
        if (teamScouting2014__resolvedKey == null || !teamScouting2014__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamScouting2014Dao targetDao = daoSession.getTeamScouting2014Dao();
            TeamScouting2014 teamScouting2014New = targetDao.load(__key);
            synchronized (this) {
                teamScouting2014 = teamScouting2014New;
            	teamScouting2014__resolvedKey = __key;
            }
        }
        return teamScouting2014;
    }

    public void setTeamScouting2014(TeamScouting2014 teamScouting2014) {
        if (teamScouting2014 == null) {
            throw new DaoException("To-one property 'teamId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teamScouting2014 = teamScouting2014;
            teamId = teamScouting2014.getId();
            teamScouting2014__resolvedKey = teamId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String toString() {
        return getTeamScouting2014()+": "+ getWheelType()+" | "+ getWheelSize()+" | "+ getWheelCount();
    }
    public boolean equals(Object data) {
        if(!(data instanceof Wheel)) {
            return false;
        }
        return  getTeamScouting2014().equals(((Wheel)data).getTeamScouting2014()) &&
                getWheelType().equals(((Wheel)data).getWheelType()) &&
                getWheelSize()==((Wheel)data).getWheelSize() &&
                getWheelCount()==((Wheel)data).getWheelCount();
    }
    public int compareTo(Wheel another) {
        int compare = this.getWheelType().compareTo(another.getWheelType());
        if(0==compare) {
            compare = this.getTeamScouting2014().compareTo(another.getTeamScouting2014());
        }
        return compare;
    }
    // KEEP METHODS END

}
