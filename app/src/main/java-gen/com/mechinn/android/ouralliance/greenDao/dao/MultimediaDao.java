package com.mechinn.android.ouralliance.greenDao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mechinn.android.ouralliance.greenDao.Multimedia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MULTIMEDIA.
*/
public class MultimediaDao extends AbstractDao<Multimedia, Long> {

    public static final String TABLENAME = "MULTIMEDIA";

    /**
     * Properties of entity Multimedia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modified = new Property(1, java.util.Date.class, "modified", false, "MODIFIED");
        public final static Property TeamNumber = new Property(2, int.class, "teamNumber", false, "TEAM_NUMBER");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Key = new Property(4, String.class, "key", false, "KEY");
        public final static Property MultimediaId = new Property(5, Long.class, "multimediaId", false, "MULTIMEDIA_ID");
        public final static Property MultimediaId = new Property(6, Long.class, "multimediaId", false, "MULTIMEDIA_ID");
    };

    private DaoSession daoSession;

    private Query<Multimedia> matchScouting2014_MultimediaQuery;
    private Query<Multimedia> teamScouting2014_MultimediaQuery;

    public MultimediaDao(DaoConfig config) {
        super(config);
    }
    
    public MultimediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MULTIMEDIA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MODIFIED' INTEGER NOT NULL ," + // 1: modified
                "'TEAM_NUMBER' INTEGER NOT NULL UNIQUE ," + // 2: teamNumber
                "'TYPE' TEXT," + // 3: type
                "'KEY' TEXT," + // 4: key
                "'MULTIMEDIA_ID' INTEGER," + // 5: multimediaId
                "'MULTIMEDIA_ID' INTEGER);"); // 6: multimediaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MULTIMEDIA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Multimedia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getModified().getTime());
        stmt.bindLong(3, entity.getTeamNumber());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
    }

    @Override
    protected void attachEntity(Multimedia entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Multimedia readEntity(Cursor cursor, int offset) {
        Multimedia entity = new Multimedia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // modified
            cursor.getInt(offset + 2), // teamNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // key
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Multimedia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModified(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTeamNumber(cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Multimedia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Multimedia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "multimedia" to-many relationship of MatchScouting2014. */
    public List<Multimedia> _queryMatchScouting2014_Multimedia(Long multimediaId) {
        synchronized (this) {
            if (matchScouting2014_MultimediaQuery == null) {
                QueryBuilder<Multimedia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MultimediaId.eq(null));
                matchScouting2014_MultimediaQuery = queryBuilder.build();
            }
        }
        Query<Multimedia> query = matchScouting2014_MultimediaQuery.forCurrentThread();
        query.setParameter(0, multimediaId);
        return query.list();
    }

    /** Internal query to resolve the "multimedia" to-many relationship of TeamScouting2014. */
    public List<Multimedia> _queryTeamScouting2014_Multimedia(Long multimediaId) {
        synchronized (this) {
            if (teamScouting2014_MultimediaQuery == null) {
                QueryBuilder<Multimedia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MultimediaId.eq(null));
                teamScouting2014_MultimediaQuery = queryBuilder.build();
            }
        }
        Query<Multimedia> query = teamScouting2014_MultimediaQuery.forCurrentThread();
        query.setParameter(0, multimediaId);
        return query.list();
    }

}
