package com.mechinn.android.ouralliance.greenDao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mechinn.android.ouralliance.greenDao.Match2014;
import com.mechinn.android.ouralliance.greenDao.TeamScouting2014;

import com.mechinn.android.ouralliance.greenDao.MatchScouting2014;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MATCH_SCOUTING2014.
*/
public class MatchScouting2014Dao extends AbstractDao<MatchScouting2014, Long> {

    public static final String TABLENAME = "MATCH_SCOUTING2014";

    /**
     * Properties of entity MatchScouting2014.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modified = new Property(1, java.util.Date.class, "modified", false, "MODIFIED");
        public final static Property MatchId = new Property(2, long.class, "matchId", false, "MATCH_ID");
        public final static Property TeamId = new Property(3, long.class, "teamId", false, "TEAM_ID");
        public final static Property Alliance = new Property(4, Boolean.class, "alliance", false, "ALLIANCE");
        public final static Property Position = new Property(5, Integer.class, "position", false, "POSITION");
        public final static Property Notes = new Property(6, String.class, "notes", false, "NOTES");
        public final static Property HotShots = new Property(7, Integer.class, "hotShots", false, "HOT_SHOTS");
        public final static Property ShotsMade = new Property(8, Integer.class, "shotsMade", false, "SHOTS_MADE");
        public final static Property ShotsMissed = new Property(9, Integer.class, "shotsMissed", false, "SHOTS_MISSED");
        public final static Property MoveForward = new Property(10, Double.class, "moveForward", false, "MOVE_FORWARD");
        public final static Property Shooter = new Property(11, Boolean.class, "shooter", false, "SHOOTER");
        public final static Property Catcher = new Property(12, Boolean.class, "catcher", false, "CATCHER");
        public final static Property Passer = new Property(13, Boolean.class, "passer", false, "PASSER");
        public final static Property DriveTrainRating = new Property(14, Double.class, "driveTrainRating", false, "DRIVE_TRAIN_RATING");
        public final static Property BallAccuracyRating = new Property(15, Double.class, "ballAccuracyRating", false, "BALL_ACCURACY_RATING");
        public final static Property Ground = new Property(16, Boolean.class, "ground", false, "GROUND");
        public final static Property OverTruss = new Property(17, Boolean.class, "overTruss", false, "OVER_TRUSS");
        public final static Property Low = new Property(18, Boolean.class, "low", false, "LOW");
        public final static Property High = new Property(19, Boolean.class, "high", false, "HIGH");
    };

    private DaoSession daoSession;

    private Query<MatchScouting2014> match2014_TeamsQuery;
    private Query<MatchScouting2014> teamScouting2014_MatchesQuery;

    public MatchScouting2014Dao(DaoConfig config) {
        super(config);
    }
    
    public MatchScouting2014Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH_SCOUTING2014' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MODIFIED' INTEGER NOT NULL ," + // 1: modified
                "'MATCH_ID' INTEGER NOT NULL ," + // 2: matchId
                "'TEAM_ID' INTEGER NOT NULL ," + // 3: teamId
                "'ALLIANCE' INTEGER," + // 4: alliance
                "'POSITION' INTEGER," + // 5: position
                "'NOTES' TEXT," + // 6: notes
                "'HOT_SHOTS' INTEGER," + // 7: hotShots
                "'SHOTS_MADE' INTEGER," + // 8: shotsMade
                "'SHOTS_MISSED' INTEGER," + // 9: shotsMissed
                "'MOVE_FORWARD' REAL," + // 10: moveForward
                "'SHOOTER' INTEGER," + // 11: shooter
                "'CATCHER' INTEGER," + // 12: catcher
                "'PASSER' INTEGER," + // 13: passer
                "'DRIVE_TRAIN_RATING' REAL," + // 14: driveTrainRating
                "'BALL_ACCURACY_RATING' REAL," + // 15: ballAccuracyRating
                "'GROUND' INTEGER," + // 16: ground
                "'OVER_TRUSS' INTEGER," + // 17: overTruss
                "'LOW' INTEGER," + // 18: low
                "'HIGH' INTEGER);"); // 19: high
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MATCH_SCOUTING2014_MATCH_ID_TEAM_ID ON MATCH_SCOUTING2014" +
                " (MATCH_ID,TEAM_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH_SCOUTING2014'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MatchScouting2014 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getModified().getTime());
        stmt.bindLong(3, entity.getMatchId());
        stmt.bindLong(4, entity.getTeamId());
 
        Boolean alliance = entity.getAlliance();
        if (alliance != null) {
            stmt.bindLong(5, alliance ? 1l: 0l);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(6, position);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(7, notes);
        }
 
        Integer hotShots = entity.getHotShots();
        if (hotShots != null) {
            stmt.bindLong(8, hotShots);
        }
 
        Integer shotsMade = entity.getShotsMade();
        if (shotsMade != null) {
            stmt.bindLong(9, shotsMade);
        }
 
        Integer shotsMissed = entity.getShotsMissed();
        if (shotsMissed != null) {
            stmt.bindLong(10, shotsMissed);
        }
 
        Double moveForward = entity.getMoveForward();
        if (moveForward != null) {
            stmt.bindDouble(11, moveForward);
        }
 
        Boolean shooter = entity.getShooter();
        if (shooter != null) {
            stmt.bindLong(12, shooter ? 1l: 0l);
        }
 
        Boolean catcher = entity.getCatcher();
        if (catcher != null) {
            stmt.bindLong(13, catcher ? 1l: 0l);
        }
 
        Boolean passer = entity.getPasser();
        if (passer != null) {
            stmt.bindLong(14, passer ? 1l: 0l);
        }
 
        Double driveTrainRating = entity.getDriveTrainRating();
        if (driveTrainRating != null) {
            stmt.bindDouble(15, driveTrainRating);
        }
 
        Double ballAccuracyRating = entity.getBallAccuracyRating();
        if (ballAccuracyRating != null) {
            stmt.bindDouble(16, ballAccuracyRating);
        }
 
        Boolean ground = entity.getGround();
        if (ground != null) {
            stmt.bindLong(17, ground ? 1l: 0l);
        }
 
        Boolean overTruss = entity.getOverTruss();
        if (overTruss != null) {
            stmt.bindLong(18, overTruss ? 1l: 0l);
        }
 
        Boolean low = entity.getLow();
        if (low != null) {
            stmt.bindLong(19, low ? 1l: 0l);
        }
 
        Boolean high = entity.getHigh();
        if (high != null) {
            stmt.bindLong(20, high ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(MatchScouting2014 entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MatchScouting2014 readEntity(Cursor cursor, int offset) {
        MatchScouting2014 entity = new MatchScouting2014( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // modified
            cursor.getLong(offset + 2), // matchId
            cursor.getLong(offset + 3), // teamId
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // alliance
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // notes
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // hotShots
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // shotsMade
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // shotsMissed
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // moveForward
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // shooter
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // catcher
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // passer
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // driveTrainRating
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // ballAccuracyRating
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // ground
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // overTruss
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // low
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0 // high
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MatchScouting2014 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModified(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setMatchId(cursor.getLong(offset + 2));
        entity.setTeamId(cursor.getLong(offset + 3));
        entity.setAlliance(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNotes(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHotShots(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setShotsMade(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setShotsMissed(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMoveForward(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setShooter(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setCatcher(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setPasser(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setDriveTrainRating(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setBallAccuracyRating(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setGround(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setOverTruss(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setLow(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setHigh(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MatchScouting2014 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MatchScouting2014 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teams" to-many relationship of Match2014. */
    public List<MatchScouting2014> _queryMatch2014_Teams(long matchId) {
        synchronized (this) {
            if (match2014_TeamsQuery == null) {
                QueryBuilder<MatchScouting2014> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MatchId.eq(null));
                queryBuilder.orderRaw("MATCH_ID ASC");
                match2014_TeamsQuery = queryBuilder.build();
            }
        }
        Query<MatchScouting2014> query = match2014_TeamsQuery.forCurrentThread();
        query.setParameter(0, matchId);
        return query.list();
    }

    /** Internal query to resolve the "matches" to-many relationship of TeamScouting2014. */
    public List<MatchScouting2014> _queryTeamScouting2014_Matches(long teamId) {
        synchronized (this) {
            if (teamScouting2014_MatchesQuery == null) {
                QueryBuilder<MatchScouting2014> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TeamId.eq(null));
                queryBuilder.orderRaw("MATCH_ID ASC");
                teamScouting2014_MatchesQuery = queryBuilder.build();
            }
        }
        Query<MatchScouting2014> query = teamScouting2014_MatchesQuery.forCurrentThread();
        query.setParameter(0, teamId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMatch2014Dao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTeamScouting2014Dao().getAllColumns());
            builder.append(" FROM MATCH_SCOUTING2014 T");
            builder.append(" LEFT JOIN MATCH2014 T0 ON T.'MATCH_ID'=T0.'_id'");
            builder.append(" LEFT JOIN TEAM_SCOUTING2014 T1 ON T.'TEAM_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MatchScouting2014 loadCurrentDeep(Cursor cursor, boolean lock) {
        MatchScouting2014 entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Match2014 match2014 = loadCurrentOther(daoSession.getMatch2014Dao(), cursor, offset);
         if(match2014 != null) {
            entity.setMatch2014(match2014);
        }
        offset += daoSession.getMatch2014Dao().getAllColumns().length;

        TeamScouting2014 teamScouting2014 = loadCurrentOther(daoSession.getTeamScouting2014Dao(), cursor, offset);
         if(teamScouting2014 != null) {
            entity.setTeamScouting2014(teamScouting2014);
        }

        return entity;    
    }

    public MatchScouting2014 loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MatchScouting2014> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MatchScouting2014> list = new ArrayList<MatchScouting2014>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MatchScouting2014> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MatchScouting2014> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
