package com.mechinn.android.ouralliance.greenDao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mechinn.android.ouralliance.greenDao.Event;

import com.mechinn.android.ouralliance.greenDao.Match;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MATCH.
*/
public class MatchDao extends AbstractDao<Match, Long> {

    public static final String TABLENAME = "MATCH";

    /**
     * Properties of entity Match.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modified = new Property(1, java.util.Date.class, "modified", false, "MODIFIED");
        public final static Property CompLevel = new Property(2, int.class, "compLevel", false, "COMP_LEVEL");
        public final static Property SetNumber = new Property(3, Integer.class, "setNumber", false, "SET_NUMBER");
        public final static Property Time = new Property(4, java.util.Date.class, "time", false, "TIME");
        public final static Property RedScore = new Property(5, Integer.class, "redScore", false, "RED_SCORE");
        public final static Property BlueScore = new Property(6, Integer.class, "blueScore", false, "BLUE_SCORE");
        public final static Property MatchNum = new Property(7, Integer.class, "matchNum", false, "MATCH_NUM");
        public final static Property EventId = new Property(8, Long.class, "eventId", false, "EVENT_ID");
        public final static Property MultimediaId = new Property(9, Long.class, "multimediaId", false, "MULTIMEDIA_ID");
    };

    private DaoSession daoSession;

    private Query<Match> event_MatchesQuery;

    public MatchDao(DaoConfig config) {
        super(config);
    }
    
    public MatchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MODIFIED' INTEGER NOT NULL ," + // 1: modified
                "'COMP_LEVEL' INTEGER NOT NULL ," + // 2: compLevel
                "'SET_NUMBER' INTEGER," + // 3: setNumber
                "'TIME' INTEGER," + // 4: time
                "'RED_SCORE' INTEGER," + // 5: redScore
                "'BLUE_SCORE' INTEGER," + // 6: blueScore
                "'MATCH_NUM' INTEGER," + // 7: matchNum
                "'EVENT_ID' INTEGER," + // 8: eventId
                "'MULTIMEDIA_ID' INTEGER);"); // 9: multimediaId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MATCH_EVENT_ID_MATCH_NUM ON MATCH" +
                " (EVENT_ID,MATCH_NUM);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Match entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getModified().getTime());
        stmt.bindLong(3, entity.getCompLevel());
 
        Integer setNumber = entity.getSetNumber();
        if (setNumber != null) {
            stmt.bindLong(4, setNumber);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time.getTime());
        }
 
        Integer redScore = entity.getRedScore();
        if (redScore != null) {
            stmt.bindLong(6, redScore);
        }
 
        Integer blueScore = entity.getBlueScore();
        if (blueScore != null) {
            stmt.bindLong(7, blueScore);
        }
 
        Integer matchNum = entity.getMatchNum();
        if (matchNum != null) {
            stmt.bindLong(8, matchNum);
        }
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(9, eventId);
        }
 
        Long multimediaId = entity.getMultimediaId();
        if (multimediaId != null) {
            stmt.bindLong(10, multimediaId);
        }
    }

    @Override
    protected void attachEntity(Match entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Match readEntity(Cursor cursor, int offset) {
        Match entity = new Match( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // modified
            cursor.getInt(offset + 2), // compLevel
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // setNumber
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // time
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // redScore
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // blueScore
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // matchNum
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // eventId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // multimediaId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Match entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModified(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setCompLevel(cursor.getInt(offset + 2));
        entity.setSetNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setRedScore(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBlueScore(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMatchNum(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEventId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setMultimediaId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Match entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Match entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "matches" to-many relationship of Event. */
    public List<Match> _queryEvent_Matches(Long eventId) {
        synchronized (this) {
            if (event_MatchesQuery == null) {
                QueryBuilder<Match> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                queryBuilder.orderRaw("MATCH_NUM ASC");
                event_MatchesQuery = queryBuilder.build();
            }
        }
        Query<Match> query = event_MatchesQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEventDao().getAllColumns());
            builder.append(" FROM MATCH T");
            builder.append(" LEFT JOIN EVENT T0 ON T.'EVENT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Match loadCurrentDeep(Cursor cursor, boolean lock) {
        Match entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
        entity.setEvent(event);

        return entity;    
    }

    public Match loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Match> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Match> list = new ArrayList<Match>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Match> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Match> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
