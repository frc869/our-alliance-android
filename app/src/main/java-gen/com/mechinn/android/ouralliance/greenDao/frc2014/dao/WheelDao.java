package com.mechinn.android.ouralliance.greenDao.frc2014.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mechinn.android.ouralliance.greenDao.frc2014.TeamScouting;

import com.mechinn.android.ouralliance.greenDao.frc2014.Wheel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WHEEL.
*/
public class WheelDao extends AbstractDao<Wheel, Long> {

    public static final String TABLENAME = "WHEEL";

    /**
     * Properties of entity Wheel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modified = new Property(1, java.util.Date.class, "modified", false, "MODIFIED");
        public final static Property Team = new Property(2, long.class, "team", false, "TEAM");
        public final static Property WheelType = new Property(3, String.class, "wheelType", false, "WHEEL_TYPE");
        public final static Property WheelSize = new Property(4, double.class, "wheelSize", false, "WHEEL_SIZE");
        public final static Property WheelCount = new Property(5, int.class, "wheelCount", false, "WHEEL_COUNT");
    };

    private DaoSession daoSession;

    private Query<Wheel> teamScouting_WheelsQuery;

    public WheelDao(DaoConfig config) {
        super(config);
    }
    
    public WheelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WHEEL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MODIFIED' INTEGER NOT NULL ," + // 1: modified
                "'TEAM' INTEGER NOT NULL ," + // 2: team
                "'WHEEL_TYPE' TEXT NOT NULL ," + // 3: wheelType
                "'WHEEL_SIZE' REAL NOT NULL ," + // 4: wheelSize
                "'WHEEL_COUNT' INTEGER NOT NULL );"); // 5: wheelCount
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_WHEEL_TEAM_WHEEL_TYPE ON WHEEL" +
                " (TEAM,WHEEL_TYPE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WHEEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Wheel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getModified().getTime());
        stmt.bindLong(3, entity.getTeam());
        stmt.bindString(4, entity.getWheelType());
        stmt.bindDouble(5, entity.getWheelSize());
        stmt.bindLong(6, entity.getWheelCount());
    }

    @Override
    protected void attachEntity(Wheel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Wheel readEntity(Cursor cursor, int offset) {
        Wheel entity = new Wheel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // modified
            cursor.getLong(offset + 2), // team
            cursor.getString(offset + 3), // wheelType
            cursor.getDouble(offset + 4), // wheelSize
            cursor.getInt(offset + 5) // wheelCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Wheel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModified(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTeam(cursor.getLong(offset + 2));
        entity.setWheelType(cursor.getString(offset + 3));
        entity.setWheelSize(cursor.getDouble(offset + 4));
        entity.setWheelCount(cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Wheel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Wheel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "wheels" to-many relationship of TeamScouting. */
    public List<Wheel> _queryTeamScouting_Wheels(long team) {
        synchronized (this) {
            if (teamScouting_WheelsQuery == null) {
                QueryBuilder<Wheel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Team.eq(null));
                queryBuilder.orderRaw("WHEEL_TYPE ASC");
                teamScouting_WheelsQuery = queryBuilder.build();
            }
        }
        Query<Wheel> query = teamScouting_WheelsQuery.forCurrentThread();
        query.setParameter(0, team);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTeamScoutingDao().getAllColumns());
            builder.append(" FROM WHEEL T");
            builder.append(" LEFT JOIN TEAM_SCOUTING T0 ON T.'TEAM'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Wheel loadCurrentDeep(Cursor cursor, boolean lock) {
        Wheel entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TeamScouting teamScouting = loadCurrentOther(daoSession.getTeamScoutingDao(), cursor, offset);
         if(teamScouting != null) {
            entity.setTeamScouting(teamScouting);
        }

        return entity;    
    }

    public Wheel loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Wheel> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Wheel> list = new ArrayList<Wheel>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Wheel> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Wheel> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
